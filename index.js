import fs from 'node:fs'
import { pluginApplications, pluginRoot } from "./model/constant.js"
import Bili from './model/bili.js';
const files = fs.readdirSync(pluginApplications).filter(file => file.endsWith('.js'))

let ret = []

files.forEach((file) => {
  ret.push(import(`./apps/${file}`))
})

ret = await Promise.allSettled(ret)

let apps = {}
for (let i in files) {
  let name = files[i].replace('.js', '')

  if (ret[i].status !== 'fulfilled') {
    logger.error(`ËΩΩÂÖ•Êèí‰ª∂ÈîôËØØÔºö${logger.red(name)}`)
    logger.error(ret[i].reason)
    continue
  }
  apps[name] = ret[i].value[Object.keys(ret[i].value)[0]]
}

logger.mark(logger.yellow("BiliÊèí‰ª∂ËΩΩÂÖ•ÂÆåÊØï"))
logger.mark(logger.yellow("‰∫§ÊµÅÁæ§ 218277938"))
logger.mark(" ‚ï±|„ÄÅ")
logger.mark("(ÀöÀé „ÄÇ7")
logger.mark(" |„ÄÅÀú„Äµ")
logger.mark("„Åò„ÅóÀç,)„Éé")
logger.mark(logger.cyan("‚∏ù‚∏ùÔΩ°ÔΩ•œâÔΩ•ÔΩ°‚∏ù‚∏ù"))
logger.mark(logger.green(" „Å•‚ù§‚äÇ"))
logger.mark(logger.cyan("üéÄ Ê¨¢Ëøé‰ΩøÁî®ÂìîÁ´ôÊèí‰ª∂üéÄ"))

await Bili.fetchlist()
await Bili.Bilicheck()
await redis.del('bili:autosign:task')
const configPath = `${pluginRoot}/config/config.yaml`

async function reloadApps() {
  const newFiles = fs.readdirSync(pluginApplications).filter(file => file.endsWith('.js'))
  const newRet = await Promise.allSettled(newFiles.map(file => import(`./apps/${file}`)))

  for (let i in newFiles) {
    let name = newFiles[i].replace('.js', '')

    if (newRet[i].status !== 'fulfilled') {
      logger.error(`[Bili-Plugin] ÈáçÊñ∞ËΩΩÂÖ•Êèí‰ª∂ÈîôËØØÔºö${logger.red(name)}`)
      logger.error(newRet[i].reason)
      continue
    }
    
    apps[name] = newRet[i].value[Object.keys(newRet[i].value)[0]]
    logger.info(`[Bili-Plugin] Êèí‰ª∂ ${name} ÈáçÊñ∞Âä†ËΩΩÊàêÂäü`)
  }
}

let isReloading = false
fs.watch(configPath, async (eventType) => {
  if (eventType === 'change' && !isReloading) {
    isReloading = true
    try {
      await reloadApps()
    } catch (error) {
      logger.error('[Bili-Plugin] Êèí‰ª∂ÈáçËΩΩÂ§±Ë¥•:', error)
    } finally {
      isReloading = false
    }
  }
})

export { apps }